name: CI test

on:
  push:
    branches:
      - '**'

env:
  TEST_RESULTS: test-results.txt

permissions:
  packages: write
  contents: read

jobs:
  build:
    name: Build Job
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Authenticate to GitHub Packages
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GHCR_PAT }}" > ~/.npmrc
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Create and add content to package.json
        run: |
          cd /home/runner/work/test/test
          touch package.json
          echo '{
            "name": "@raghu1211/test-project",
            "version": "1.0.0",
            "description": "A test project",
            "scripts": {
              "start": "node app.js",
              "test": "echo \"Running tests...\" && exit 0",
              "build": "echo \"Building project...\" && echo \"Build completed\""
            },
            "publishConfig": {
              "registry": "https://npm.pkg.github.com/"
            },
            "dependencies": {
              "express": "^4.17.1"
            }
          }' > package.json

      - name: Display package.json
        run: |
          cat /home/runner/work/test/test/package.json

      - name: Install dependencies
        run: |
          cd /home/runner/work/test/test
          npm install

      - name: Configure Git
        run: |
          git config --global user.email "raghavenderraoch89@gmail.com"
          git config --global user.name "raghu1211"

      - name: Add all changes to Git
        run: git add .

      - name: Commit changes (if any)
        run: |
          git diff-index --quiet HEAD || git commit -m "Committing untracked changes"

      - name: Update package version
        id: version
        run: |
          NEW_VERSION=$(npm version patch | sed 's/^v//') # Increment version and strip 'v' if present
          echo "New version is $NEW_VERSION"
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Push updated version to repository
        run: |
          git push origin master
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the project
        run: |
          cd /home/runner/work/test/test
          npm run build

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: /home/runner/work/test/test

  test:
    name: Test Job
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run unit tests
        run: |
          cd /home/runner/work/test/test
          npm test > $TEST_RESULTS

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: $TEST_RESULTS

  publish:
    name: Publish Job
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Authenticate to GitHub Packages
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GHCR_PAT }}" > ~/.npmrc
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}

      # - name: Pull latest changes
      #   run: git pull origin master

      - name: Configure Git
        run: |
          git config --global user.email "raghavenderraoch89@gmail.com"
          git config --global user.name "raghu1211"

      - name: Stash uncommitted changes
        run: git stash || echo "No changes to stash"

      - name: Pull latest changes again
        run: git pull origin master

      - name: Bump package version
        id: version
        run: |
          cd /home/runner/work/test/test
          NEW_VERSION=$(npm version patch | sed 's/^v//') # Increment version and strip 'v' if present
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Check for changes before pushing
        run: |
          git diff-index --quiet HEAD || (git add package.json package-lock.json && git commit -m "Bump package version to ${{ steps.version.outputs.new_version }}" || echo "No changes to commit")

      - name: Push changes
        run: |
          git push origin master

      - name: Publish package to GitHub Packages
        run: |
          cd /home/runner/work/test/test
          NEW_VERSION=$(npm version patch | sed 's/^v//') # Increment version and strip 'v' if present
          npm publish --access public --tag "v$NEW_VERSION" || (echo "Publishing failed; attempting to overwrite." && npm publish --access public --tag "v$NEW_VERSION" --force)

  deploy:
    name: Deploy Job
    runs-on: ubuntu-latest
    environment: dev
    needs: publish
    if: ${{ github.ref == 'refs/heads/master' }}  
    steps:
      - name: Create a deployment directory
        run: mkdir -p /home/runner/work/deployment/test-deploy

      - name: Copy files to deployment directory
        run: |
          if [ -d "/home/runner/work/test/test" ]; then
            cp -r /home/runner/work/test/test/* /home/runner/work/deployment/test-deploy/
            echo "Deployment to /home/runner/work/deployment/test-deploy/ completed."
          else
            echo "Error: Build folder '/home/runner/work/test/test' not found."
            exit 1
          fi
